#ifndef ${NAMESPACE}_${CLASSNAME}_H
#define ${NAMESPACE}_${CLASSNAME}_H

#include "${Namespace}/DllExport.h"
#include "${Namespace}/${FactoryType}.h"
#include "API/Singleton.h"
#include "Kernel/DynamicFactory.h"

namespace ${Namespace}
{

/**
 * A factory for dynamically creating instances of ${FactoryType}.
 */
class ${NAMESPACE}_EXPORT ${ClassName}: public Kernel::DynamicFactory<${FactoryType}>, protected API::Singleton
{
public:
  virtual std::string name() const {return "${ClassName}";}
  static ${ClassName}& instance();
protected:
  ${ClassName}();
};

} // ${NAMESPACE}

/// A macro to declare a new type of ${FactoryType} that can be created by this factory
#define DECLARE_${FACTORYTYPE}(type) \
int declare_${factorytype}_##type( (${Namespace}::${ClassName}::instance().subscribe<type>(#type),0));

#endif // ${NAMESPACE}_${CLASSNAME}_H
