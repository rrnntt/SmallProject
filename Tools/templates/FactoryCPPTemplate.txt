#include "${Namespace}/${ClassName}.h"
#include "API/Framework.h"

namespace ${Namespace}
{

/**
 * Constructor.
 */
${ClassName}::${ClassName}():Kernel::DynamicFactory<${FactoryType}>()
{
}

/**
 * Return reference to the instance of the singleton. On first call the singleton 
 * is registered with API::Framework.
 */
${ClassName}& ${ClassName}::instance()
{
  API::Singleton* s = API::Framework::instance().getSingleton("${ClassName}");
  if (s == nullptr)
  {
    ${ClassName} *f = new ${ClassName}();
    API::Framework::instance().registerSingleton("${ClassName}",f);
    return *f;
  }
  else
  {
    return *static_cast<${ClassName}*>(s);
  }
}

} // ${Namespace}

